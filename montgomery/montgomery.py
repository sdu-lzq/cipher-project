#扩展欧几里得定理用于求逆元
import time

def inverse_mod(a, p):
    old_s, s = 1, 0
    old_t, t = 0, 1
    old_r, r = a, p
    if p == 0:
        return 0
    else:
        while r != 0:
            q = old_r // r
            old_r, r = r, old_r - q * r
            old_s, s = s, old_s - q * s
            old_t, t = t, old_t - q * t
    return (old_s%p+p)%p



"""
Montgomery reduction
t:integer in t mod n
n:mod n
r:R,2^k
_n:inverse of n mod r
output = t*r^(-1) mod n
"""

def redc(t:int,n:int,r:int,_n:int)->int:
    assert 0 <= t <= r*n-1
    rbit_len = r.bit_length()-1
    r_mask = r-1
    m=((t&r_mask)*_n)&r_mask #m <- ((T mod R)N')mod R
    t = (t+m*n)>>rbit_len #t<-(T+mN)/R
    result = t if (t<n) else (t-n)
    assert 0<=result<n
    return result

    
#amod return a mod p

def amod(a:int,p:int)->int:
    a_p_len = max(a.bit_length(),p.bit_length())
    r_len = ((a_p_len+7)//8)*8 #对齐到8的整数倍
    r = 2**r_len #2^k
    r1 = r%p
    _n=inverse_mod(p,r)
    _n = -_n%r
    return redc(a*r1,p,r,_n)



def mult_mod(a:int,b:int,p:int)->int:
    a_p_len = max(a.bit_length(),b.bit_length(),p.bit_length())
    r_len = (a_p_len+7)//8*8
    r = 2**r_len #2^k
    r1 = r%p #r1 = r mod p
    r2 = r1*r1%p #r2 = r*r mod p
    _n = inverse_mod(p,r)
    _n = -_n%r

    ar = redc(a*r2,p,r,_n)
    br = redc(b*r2,p,r,_n)
    abr = redc(ar*br,p,r,_n)
    return redc(abr,p,r,_n)


acc = 1024
def Barrett(n,a):
    k = n.bit_length()+acc
    #由于m存在，那么k一定要比n的bit数多
    #acc用来控制e的大小，acc越大，e越小，准确度也就越高
    m = (2<<(k-1))//n
    #m=floor(2^k/n)
    q = (m*a)>>k
    #print(q)
    #q = floor(a/n) = a * m/2^k
    res = a-q*n
    if(res>=n):
        res -=n
    return res


if __name__=='__main__':
    a = 24323894044365873031245458094874190260697127092346297087950166767055502066756103674985135219014398461873146257998728876580994851163035308940418012188772011516083950832666018922872358872231370039569050550868528871510631824453955150104525766090960947302291295168400384379272858758446185990427017814868784418247943955951173220092058157789838684940093653433438263353435290612685799208225489854783807432345432279015861508365406389236255392282304878132281460186533368620622532022174486889907015559359312677034829879913780151364357006000515163642357304320352609664610111199020930627479370663299112200614908410209484873267496
    b = 27448743300044676644365010310728600528922326267830707644815065197140037114188323560146810216156374554902660623901255127638403915226580166554878584229922542180781816569299014421171288369865832926956084706649099526748509658227759639976724201291855451951834694093749438734446097641956641623687315538027047148005020789352844990375830372465302395287663480114419627370546866628926188374330233004991531154730113271484473221416757743598844829819103822578573085885928291972268618327238505363722985460686388901301351842796511543139501662881983331002989073499290031327327538970169076297207359643563229083669620115218642415688357
    N = 7089745344266859480614507311264079523002069342269392496739807170589499515024769483334564273384579471656769122081065942730193081912543770989928919864286986113126072418565253655226518533264483860456726493168267243702334984668902810716102927916174377717276047956631114629664539095252628644851754956910324792281941107533126895660572412770497466221698862817803540177608626196335966352214198640798649776496314331219591342531044776877

    print("a*b mod N=",mult_mod(a,b,N))
    print("a mod N=",Barrett(N,a))